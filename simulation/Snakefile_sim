# external script to run this snakefile and an additional snakefile_analysis
localrules: generate_config

rule all:
    input:
        expand(config['out']['outdir']+"/{cov}/results/{strand}/run_{rep}/{rep}.modref_1/results/summary/te_summary.csv", cov=config['submit']['cov_range'], rep=range(config['submit']['num_rep']), strand=config['submit']['strand']) 

rule generate_config:
    conda:
        config['resources']['condaenv'] 
    output:
        config['in']['cfg']
    params:
        mccdir=config['mccdir'],
        script=config['config']['cfg_script'],
        family=config['config']['family'],
        ins_bed=config['config']['ins_bed'],
        len_tsd=config['config']['len_tsd']
    shell:
        "python {params.script} --family {params.family} --bed {params.ins_bed} --mcc {params.mccdir} --out {output} --tsd {params.len_tsd}"

rule run_simulation:
    input:
        cfg=config['in']['cfg'],
        ref=config['in']['ref'],
        consensus=config['in']['consensus'],
        gff=config['in']['gff'],
        tax=config['in']['tax']
    conda:
        config['resources']['condaenv']
    output:
        config['out']['outdir']+"/{cov}/results/{strand}/run_{rep}/{rep}.modref_1/results/summary/te_summary.csv"
    params:
        out=config['out']['outdir']+"/{cov}/",
        start=lambda wc: wc.get("rep"),
        end=lambda wc: wc.get("rep"),
        runid=config['simparams']['runid'],
        single=config['simparams']['single'],
        coverage=lambda wc: wc.get("cov"),
        length=config['simparams']['length'],
        insertsize=config['simparams']['insertsize'],
        error=config['simparams']['error'],
        keep_intermediate=config['simparams']['keep_intermediate'],
        strand=lambda wc: wc.get("strand"),
        seed=lambda wc: wc.get("rep"),
        sim=config['simparams']['simulator'],
        mcc_version=config['simparams']['mcc_version']
    threads: config['resources']['threads']
    resources:
        mem=config['resources']['mem']
    script:
        config['in']['script']
